{"version":3,"sources":["components/Select/index.jsx","pages/Settings/index.jsx"],"names":["Select","normalizedValues","values","value","onChange","Array","map","current","label","Object","keys","Form","Control","as","defaultProps","withRouter","connect","state","settings","dispatch","loadSettings","settingsActions","saveSettings","history","useState","userSettings","setUserSettings","useEffect","updateSetting","key","save","push","Container","Group","Label","amount","event","parseInt","target","difficulty","OpenTrivia","ANY","EASY","MEDIUM","HARD","type","MULTIPLE","BOOLEAN","className","Button","variant","onClick"],"mappings":"oNAaA,SAASA,EAAT,GAA8C,IACxCC,EADYC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAoB/B,OAjBEH,EADEC,aAAkBG,MACDH,EAAOI,KAAI,SAACC,GAAD,MAAc,CAC1CA,UACAC,MAAOD,MAGUE,OAAOC,KAAKR,GAAQI,KAAI,SAACC,GAC1C,IAAMC,EAAQN,EAAOK,GACrB,MAAyB,kBAAbA,EACH,CACLC,QACAD,WAGGA,KAKT,cAACI,EAAA,EAAKC,QAAN,CAAcC,GAAG,SAASV,MAAOA,EAAOC,SAAUA,EAAlD,SACGH,EAAiBK,KAAI,gBAAGE,EAAH,EAAGA,MAAOD,EAAV,EAAUA,QAAV,OACpB,wBAAsBJ,MAAOI,EAA7B,SAAuCC,GAA1BD,QAarBP,EAAOc,aAAe,CACpBX,MAAO,KACPC,SAAU,cAGGJ,Q,QC8DAe,sBAAWC,aATF,SAACC,GAAD,MAAY,CAClCC,SAAUD,EAAMC,aAGS,SAACC,GAAD,MAAe,CACxCC,aAAc,kBAAMD,EAASE,QAC7BC,aAAc,SAACJ,GAAD,OAAcC,EAASE,IAA6BH,QAG1CF,EAhG1B,YAEI,IAAD,IADDE,EACC,EADDA,SAAUK,EACT,EADSA,QAASH,EAClB,EADkBA,aAAcE,EAChC,EADgCA,aAChC,EACuCE,mBAAS,eAAKN,IADrD,mBACMO,EADN,KACoBC,EADpB,KAEDC,qBAAU,WACRP,MACC,IAEHO,qBAAU,WACRD,EAAgB,eAAKR,MACpB,CAACA,IAEJ,IAAMU,EAAgB,SAACC,EAAK1B,GAC1BuB,EAAgB,2BACXD,GADU,kBAEZI,EAAM1B,MAIL2B,EAAO,WACXR,EAAaG,GACbF,EAAQQ,KAAK,MAGf,OACE,eAACC,EAAA,EAAD,WACE,eAACrB,EAAA,EAAKsB,MAAN,WACE,cAACtB,EAAA,EAAKuB,MAAN,kCACA,cAAC,EAAD,CACE/B,MAAOsB,EAAaU,OACpB/B,SAAU,SAACgC,GAAD,OAAWR,EAAc,SAAUS,SAASD,EAAME,OAAOnC,MAAO,MAC1ED,OAAQ,CAAC,GAAI,GAAI,SAIrB,eAACS,EAAA,EAAKsB,MAAN,WACE,cAACtB,EAAA,EAAKuB,MAAN,yBACA,cAAC,EAAD,CACE/B,MAAOsB,EAAac,WACpBnC,SAAU,SAACgC,GAAD,OAAWR,EAAc,aAAcQ,EAAME,OAAOnC,QAC9DD,QAAM,mBACHsC,IAAsBC,IAAM,OADzB,cAEHD,IAAsBE,KAAO,QAF1B,cAGHF,IAAsBG,OAAS,UAH5B,cAIHH,IAAsBI,KAAO,QAJ1B,QASV,eAACjC,EAAA,EAAKsB,MAAN,WACE,cAACtB,EAAA,EAAKuB,MAAN,gCACA,cAAC,EAAD,CACE/B,MAAOsB,EAAaoB,KACpBzC,SAAU,SAACgC,GAAD,OAAWR,EAAc,OAAQQ,EAAME,OAAOnC,QACxDD,QAAM,mBACHsC,IAAuBC,IAAM,OAD1B,cAEHD,IAAuBM,SAAW,mBAF/B,cAGHN,IAAuBO,QAAU,cAH9B,QAQV,sBAAKC,UAAU,iCAAf,UACE,cAACC,EAAA,EAAD,CAAQC,QAAQ,kBAAkBC,QAASrB,EAA3C,oBAEA,cAACmB,EAAA,EAAD,CAAQE,QAASrB,EAAjB","file":"static/js/9.f8207f88.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form } from \"react-bootstrap\";\n\n/**\n * Render a Select form control, based on the provided values\n *\n * @param {*} values\n * @param {*} value\n * @param {Function} onChange\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Select({ values, value, onChange }) {\n  let normalizedValues;\n  if (values instanceof Array) {\n    normalizedValues = values.map((current) => ({\n      current,\n      label: current,\n    }));\n  } else {\n    normalizedValues = Object.keys(values).map((current) => {\n      const label = values[current];\n      if ((typeof current) === \"string\") {\n        return {\n          label,\n          current,\n        };\n      }\n      return current;\n    });\n  }\n\n  return (\n    <Form.Control as=\"select\" value={value} onChange={onChange}>\n      {normalizedValues.map(({ label, current }) => (\n        <option key={current} value={current}>{label}</option>\n      ))}\n    </Form.Control>\n  );\n}\n\nSelect.propTypes = {\n  // eslint-disable-next-line react/forbid-prop-types\n  value: PropTypes.any,\n  values: PropTypes.oneOfType([PropTypes.array, PropTypes.object]).isRequired,\n  onChange: PropTypes.func,\n};\n\nSelect.defaultProps = {\n  value: null,\n  onChange: () => {},\n};\n\nexport default Select;\n","import React, { useEffect, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Container, Form } from \"react-bootstrap\";\nimport { withRouter } from \"react-router\";\nimport { connect } from \"react-redux\";\n\nimport * as OpenTrivia from \"../../api/OpenTrivia\";\nimport Select from \"../../components/Select\";\nimport * as settingsActions from \"../../store/settings/actions\";\n\n/**\n * Page for the user to change the settings\n *\n * @param {Settings} settings\n * @param {History} history\n * @param {Function} loadSettings\n * @param {Function} saveSettings\n * @returns {JSX.Element}\n * @constructor\n */\nfunction Settings({\n  settings, history, loadSettings, saveSettings,\n}) {\n  const [userSettings, setUserSettings] = useState({ ...settings });\n  useEffect(() => {\n    loadSettings();\n  }, []);\n\n  useEffect(() => {\n    setUserSettings({ ...settings });\n  }, [settings]);\n\n  const updateSetting = (key, value) => {\n    setUserSettings({\n      ...userSettings,\n      [key]: value,\n    });\n  };\n\n  const save = () => {\n    saveSettings(userSettings);\n    history.push(\"/\");\n  };\n\n  return (\n    <Container>\n      <Form.Group>\n        <Form.Label>Number of questions</Form.Label>\n        <Select\n          value={userSettings.amount}\n          onChange={(event) => updateSetting(\"amount\", parseInt(event.target.value, 10))}\n          values={[10, 15, 20]}\n        />\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label>Difficulty</Form.Label>\n        <Select\n          value={userSettings.difficulty}\n          onChange={(event) => updateSetting(\"difficulty\", event.target.value)}\n          values={{\n            [OpenTrivia.DIFFICULTY.ANY]: \"Any\",\n            [OpenTrivia.DIFFICULTY.EASY]: \"Easy\",\n            [OpenTrivia.DIFFICULTY.MEDIUM]: \"Medium\",\n            [OpenTrivia.DIFFICULTY.HARD]: \"Hard\",\n          }}\n        />\n      </Form.Group>\n\n      <Form.Group>\n        <Form.Label>Type of questions</Form.Label>\n        <Select\n          value={userSettings.type}\n          onChange={(event) => updateSetting(\"type\", event.target.value)}\n          values={{\n            [OpenTrivia.SELECT_TYPE.ANY]: \"Any\",\n            [OpenTrivia.SELECT_TYPE.MULTIPLE]: \"Multiple choice\",\n            [OpenTrivia.SELECT_TYPE.BOOLEAN]: \"True/False\",\n          }}\n        />\n      </Form.Group>\n\n      <div className=\"d-flex justify-content-between\">\n        <Button variant=\"outline-primary\" onClick={save}>Cancel</Button>\n\n        <Button onClick={save}>Save</Button>\n      </div>\n    </Container>\n  );\n}\n\nSettings.propTypes = {\n  settings: PropTypes.shape({\n    amount: PropTypes.number,\n    type: PropTypes.string,\n    difficulty: PropTypes.string,\n  }).isRequired,\n\n  saveSettings: PropTypes.func.isRequired,\n  loadSettings: PropTypes.func.isRequired,\n\n  history: PropTypes.shape({\n    replace: PropTypes.func,\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  loadSettings: () => dispatch(settingsActions.loadSettingsFromStorage()),\n  saveSettings: (settings) => dispatch(settingsActions.saveSettings(settings)),\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Settings));\n"],"sourceRoot":""}