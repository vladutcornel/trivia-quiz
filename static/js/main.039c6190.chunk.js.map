{"version":3,"sources":["App.jsx","store/fillState.js","store/questions/reducer.js","store/leaderboard/reducer.js","store/index.js","store/settings/reducer.js","index.jsx","api/Storage.js","api/OpenTrivia.js","store/settings/index.js","store/questions/db.js","lib/arrayShuffle.js","store/questions/actions.js","lib/createDatabase.js","store/settings/template.js","store/leaderboard/db.js","store/leaderboard/actions.js","store/settings/actions.js"],"names":["Start","React","lazy","Questions","Settings","Leaderboard","App","fallback","Navbar","className","Container","to","path","mdiCog","size","render","fillState","state","updates","initialState","Object","freeze","questions","expire","Date","now","top","latest","reducer","combineReducers","type","payload","actions","map","question","id","settings","template","leaderboard","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","Storage","prefix","this","keyName","keyDefault","JSON","parse","localStorage","getItem","key","keyValue","setItem","stringify","DIFFICULTY","ANY","EASY","MEDIUM","HARD","SELECT_TYPE","MULTIPLE","BOOLEAN","OpenTrivia","options","difficulty","axios","create","baseURL","a","amount","params","get","response","data","response_code","Error","results","storage","getSettings","db","createDatabase","join","arrayShuffle","input","work","out","length","index","Math","floor","random","splice","value","push","LOAD_QUESTIONS","REPLACE_QUESTION","DELETE_QUESTIONS_FROM_MEMORY","loadQuestionsFromDB","dispatch","limit","toArray","loadQuestionsFromAPI","trivia","encode","load","answers","correctAnswer","incorrect_answers","concat","correct_answer","findIndex","answer","decodeURIComponent","isLast","userAnswer","originalCorrectAnswer","clear","bulkPut","saveAnswer","answerIndex","dbQuestion","put","deleteQuestionsFromMemory","name","schema","Dexie","oldSchema","version","changed","keys","forEach","table","stores","LOAD_LEADERBOARD","LOAD_LATEST_PLAY","loadLatestPlayer","loadLeaderboard","orderBy","reverse","saveScore","answersCorrect","add","answersTotal","percentage","insertId","SAVE_SETTINGS","loadSettingsFromStorage","saveSettings"],"mappings":"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","file":"static/js/main.039c6190.chunk.js","sourcesContent":["import React, { Suspense } from \"react\";\n\nimport { BrowserRouter, Link } from \"react-router-dom\";\nimport { Route, Switch } from \"react-router\";\nimport { Container, Navbar } from \"react-bootstrap\";\nimport { mdiCog } from \"@mdi/js\";\nimport Icon from \"@mdi/react\";\n\nconst Start = React.lazy(() => import(\"./pages/Start\"));\nconst Questions = React.lazy(() => import(\"./pages/Questions\"));\nconst Settings = React.lazy(() => import(\"./pages/Settings\"));\nconst Leaderboard = React.lazy(() => import(\"./pages/Leaderboard\"));\n\nfunction App() {\n  const fallback = <div>Loading...</div>;\n  return (\n    <BrowserRouter>\n      <>\n        <Navbar className=\"justify-content-between\">\n          <Container>\n            <Link to=\"/\" className=\"navbar-brand\">Cornel&apos;s Trivia</Link>\n            <Link to=\"/settings\" className=\"nav-link\">\n              <Icon path={mdiCog} size={1} />\n              <span className=\"sr-only\">Settings</span>\n            </Link>\n          </Container>\n        </Navbar>\n        <Switch>\n          <Route\n            path=\"/q/:question\"\n            render={() => (\n              <Suspense fallback={fallback}>\n                <Questions />\n              </Suspense>\n            )}\n          />\n          <Route\n            path=\"/settings\"\n            render={() => (\n              <Suspense fallback={fallback}>\n                <Settings />\n              </Suspense>\n            )}\n          />\n          <Route\n            path=\"/leaderboard\"\n            render={() => (\n              <Suspense fallback={fallback}>\n                <Leaderboard />\n              </Suspense>\n            )}\n          />\n          <Route\n            path=\"/\"\n            render={() => (\n              <Suspense fallback={fallback}>\n                <Start />\n              </Suspense>\n            )}\n          />\n        </Switch>\n      </>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","/**\n * Helper function to safely update the provided state\n *\n * @param {Object} state\n * @param {Object} updates\n * @returns {Object}\n */\nexport default function fillState(state, updates) {\n  return {\n    ...state,\n    ...updates,\n  };\n}\n","import fillState from \"../fillState\";\nimport * as actions from \"./actions\";\n\nconst initialState = Object.freeze({\n  questions: [],\n  expire: Date.now(),\n});\n\nexport default function questionsReducer(state = initialState, { type, payload = {} } = {}) {\n  switch (type) {\n    case actions.LOAD_QUESTIONS: return fillState(state, {\n      expire: payload.expire,\n      questions: [...payload.questions],\n    });\n    case actions.DELETE_QUESTIONS_FROM_MEMORY: return fillState(state, {\n      questions: [],\n    });\n    case actions.REPLACE_QUESTION: return fillState(state, {\n      questions: state.questions.map((question) => {\n        if (question.id === payload.question.id) {\n          return { ...payload.question };\n        }\n\n        return { ...question };\n      }),\n    });\n    default:\n  }\n  return state;\n}\n","import fillState from \"../fillState\";\nimport * as actions from \"./actions\";\n\nconst initialState = Object.freeze({\n  top: [],\n  latest: {},\n});\n\nexport default function leaderboardReducer(\n  state = initialState,\n  { type, payload = {} } = {},\n) {\n  switch (type) {\n    case actions.LOAD_LEADERBOARD: return fillState(state, {\n      top: [...payload.top],\n    });\n    case actions.LOAD_LATEST_PLAY: return fillState(state, {\n      latest: { ...payload.latest },\n    });\n    default:\n  }\n  return state;\n}\n","import {\n  createStore,\n  combineReducers,\n  applyMiddleware,\n  compose,\n} from \"redux\";\n\nimport thunk from \"redux-thunk\";\nimport questionsReducer from \"./questions/reducer\";\nimport settingsReducer from \"./settings/reducer\";\nimport leaderboardReducer from \"./leaderboard/reducer\";\n\nconst reducer = combineReducers({\n  questions: questionsReducer,\n  settings: settingsReducer,\n  leaderboard: leaderboardReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n","import fillState from \"../fillState\";\nimport * as actions from \"./actions\";\nimport template from \"./template\";\n\nexport default function settingsReducer(state = template, { type, payload = {} } = {}) {\n  switch (type) {\n    case actions.SAVE_SETTINGS: return fillState(state, {\n      ...payload,\n    });\n    default:\n  }\n  return state;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider as Redux } from \"react-redux\";\n\nimport \"./styles/index.scss\";\nimport App from \"./App\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Redux store={store}>\n    <App />\n  </Redux>,\n  document.getElementById(\"root\"),\n);\n","/**\n * Simple helper for working with localStorage.\n *\n * Goodies:\n * - Automatically adds a namespace/prefix to keys\n * - Serializes data\n *\n * Badies:\n * - property-style access to localStorage is lost. A Proxy would fix that, but it wasn't needed.\n */\nexport default class Storage {\n  constructor(prefix) {\n    this.prefix = prefix;\n  }\n\n  key(keyName) {\n    return `${this.prefix}:${keyName}`;\n  }\n\n  getItem(keyName, keyDefault = \"\") {\n    return JSON.parse(localStorage.getItem(this.key(keyName))) ?? keyDefault;\n  }\n\n  setItem(keyName, keyValue) {\n    localStorage.setItem(this.key(keyName), JSON.stringify(keyValue));\n  }\n}\n","import axios from \"axios\";\n\nexport const DIFFICULTY = Object.freeze({\n  ANY: \"any\",\n  EASY: \"easy\",\n  MEDIUM: \"medium\",\n  HARD: \"hard\",\n});\n\nexport const SELECT_TYPE = Object.freeze({\n  ANY: \"any\",\n  MULTIPLE: \"multiple\",\n  BOOLEAN: \"boolean\",\n});\n\n/**\n * Helper to work with the OpenTrivia API\n */\nexport default class OpenTrivia {\n  constructor(options) {\n    this.options = {\n      ...{\n        difficulty: DIFFICULTY.ANY,\n        type: SELECT_TYPE.ANY,\n      },\n\n      ...options,\n    };\n\n    this.axios = axios.create({\n      baseURL: \"https://opentdb.com/\",\n    });\n  }\n\n  async load(amount = 10) {\n    const params = {\n      ...this.options,\n      amount,\n    };\n\n    if (params.difficulty === DIFFICULTY.ANY) {\n      params.difficulty = \"\";\n    }\n\n    if (params.type === SELECT_TYPE.ANY) {\n      params.type = \"\";\n    }\n\n    const response = await this.axios.get(\"api.php\", {\n      params,\n    });\n\n    const { data } = response;\n\n    if (data.response_code !== 0) {\n      throw new Error(\"Failed to load questions\");\n    }\n\n    return data.results;\n  }\n\n  setDifficulty(difficulty) {\n    this.options.difficulty = difficulty;\n  }\n\n  setType(type) {\n    this.options.type = type;\n  }\n}\n","import Storage from \"../../api/Storage\";\nimport template from \"./template\";\n\nconst storage = new Storage(\"settings\");\n\n/**\n * Get the current settings from local storage, or defaults if they are not saved.\n * @returns {*}\n */\nexport default function getSettings() {\n  return storage.getItem(\"settings\", template);\n}\n","import createDatabase from \"../../lib/createDatabase\";\n\nconst db = createDatabase(\"questions\", {\n  questions: [\n    \"++id\",\n    \"type\",\n    \"difficulty\",\n    \"question\",\n    // \"correctAnswer\", // available but not indexed\n  ].join(\",\"),\n});\n\nexport default db;\n","/**\n * Shuffle/Randomize the elements of an array\n * A new array is returned.\n * @param {Array} input\n * @returns {Array}\n */\nexport default function arrayShuffle(input) {\n  const work = [...input];\n  const out = [];\n\n  while (work.length > 0) {\n    const index = Math.floor(Math.random() * work.length) - 1;\n    const [value] = work.splice(index, 1);\n\n    out.push(value);\n  }\n\n  return out;\n}\n","/* eslint-disable import/prefer-default-export */\nimport OpenTrivia, { SELECT_TYPE } from \"../../api/OpenTrivia\";\n\nimport db from \"./db\";\nimport getSettings from \"../settings\";\nimport arrayShuffle from \"../../lib/arrayShuffle\";\nimport Storage from \"../../api/Storage\";\n\nexport const LOAD_QUESTIONS = \"LOAD_QUESTIONS\";\nexport const REPLACE_QUESTION = \"REPLACE_QUESTION\";\nexport const DELETE_QUESTIONS_FROM_MEMORY = \"DELETE_QUESTIONS_FROM_MEMORY\";\n\nconst storage = new Storage(\"questions\");\n\n/**\n * Load questions from IndexedDB into Redux\n *\n * @returns {function(*): Promise<void>}\n */\nexport const loadQuestionsFromDB = () => async (dispatch) => {\n  const settings = getSettings();\n  const questions = await db.questions.limit(settings.amount).toArray();\n\n  dispatch({\n    type: LOAD_QUESTIONS,\n    payload: {\n      questions,\n      expire: storage.getItem(\"expire\"),\n    },\n  });\n};\n\n/**\n * Fetch questions from API, and save them in IndexedDB\n * @returns {function(*): Promise<void>}\n */\nexport const loadQuestionsFromAPI = () => async (dispatch) => {\n  const settings = getSettings();\n  const trivia = new OpenTrivia({\n    ...settings,\n    encode: \"url3986\",\n  });\n  const questions = (await trivia.load(settings.amount)).map((question) => {\n    let answers;\n\n    if (question.type === SELECT_TYPE.BOOLEAN) {\n      answers = [\"True\", \"False\"];\n    } else {\n      answers = arrayShuffle(\n        question.incorrect_answers.concat([question.correct_answer]),\n      );\n    }\n\n    const correctAnswer = answers.findIndex((answer) => answer === question.correct_answer);\n\n    return ({\n      id: question.id,\n      question: decodeURIComponent(question.question),\n      answers: answers.map((answer) => decodeURIComponent(answer)),\n      correctAnswer,\n      isLast: false,\n      userAnswer: -1,\n      difficulty: question.difficulty,\n      type: question.type,\n      originalCorrectAnswer: question.correct_answer,\n    });\n  });\n\n  questions[questions.length - 1].isLast = true;\n\n  await db.questions.clear();\n  await db.questions.bulkPut(questions);\n\n  storage.setItem(\"expire\", Date.now() + 15 * 60 * 1000);\n\n  await loadQuestionsFromDB(settings)(dispatch);\n};\n\n/**\n * Update the user answer for the provided question\n *\n * @param {Object} question\n * @param {Number} answerIndex\n */\nexport const saveAnswer = ({ question, answerIndex }) => async (dispatch) => {\n  const dbQuestion = await db.questions.get(question.id);\n\n  if (dbQuestion.userAnswer === answerIndex) {\n    return;\n  }\n  dbQuestion.userAnswer = answerIndex;\n\n  await db.questions.put(dbQuestion);\n\n  dispatch({\n    type: REPLACE_QUESTION,\n    payload: {\n      question: dbQuestion,\n    },\n  });\n};\n\nexport const deleteQuestionsFromMemory = () => ({\n  type: DELETE_QUESTIONS_FROM_MEMORY,\n});\n","import Dexie from \"dexie\";\nimport Storage from \"../api/Storage\";\n\n/**\n * Creates an Dexie/IndexedDB database, automatically increasing the version if needed\n *\n * @param {String} name IndexedDB database name\n * @param {Object} schema Dexie compatible schema @see https://dexie.org/docs/Version/Version.stores()\n * @returns {Dexie}\n */\nexport default function createDatabase(name, schema) {\n  const db = new Dexie(name);\n  const storage = new Storage(`db:${name}`);\n  const oldSchema = storage.getItem(\"schema\", {});\n  let version = storage.getItem(\"version\", 0);\n\n  let changed = false;\n  Object.keys(schema).forEach((table) => {\n    if (!oldSchema[table] || schema[table] !== oldSchema[table]) {\n      changed = true;\n    }\n  });\n\n  if (changed) {\n    version += 1;\n    storage.setItem(\"version\", version);\n    storage.setItem(\"schema\", schema);\n  }\n\n  db.version(version).stores(schema);\n\n  return db;\n}\n","import * as OpenTrivia from \"../../api/OpenTrivia\";\n\n/**\n * Default settings\n */\nexport default Object.freeze({\n  amount: 10,\n  difficulty: OpenTrivia.DIFFICULTY.ANY,\n  type: OpenTrivia.SELECT_TYPE.ANY,\n});\n","import createDatabase from \"../../lib/createDatabase\";\n\nconst db = createDatabase(\"leaderboard\", {\n  leaderboard: [\n    \"++id\",\n    \"answersCorrect\",\n    \"answersTotal\",\n    \"percentage\",\n    \"difficulty\",\n    \"type\",\n    \"name\",\n  ].join(\",\"),\n});\n\nexport default db;\n","/* eslint-disable import/prefer-default-export,camelcase */\n\nimport db from \"./db\";\nimport getSettings from \"../settings\";\nimport Storage from \"../../api/Storage\";\n\nexport const LOAD_LEADERBOARD = \"LOAD_LEADERBOARD\";\nexport const LOAD_LATEST_PLAY = \"LOAD_LATEST_PLAY\";\n\nconst storage = new Storage(\"leaderboard\");\n\n/**\n * Load data about the latest score from IndexedDB into Redux\n *\n * @returns {function(*): Promise<void>}\n */\nexport const loadLatestPlayer = () => async (dispatch) => {\n  let latest;\n  try {\n    latest = await db.leaderboard.get(storage.getItem(\"latest_id\"));\n  } catch (e) {\n    latest = {\n      id: 0,\n      name: \"\",\n    };\n  }\n\n  dispatch({\n    type: LOAD_LATEST_PLAY,\n    payload: {\n      latest,\n    },\n  });\n};\n\n/**\n * Load saved scores from IndexedDB\n */\nexport const loadLeaderboard = () => async (dispatch) => {\n  const top = await db.leaderboard\n    .orderBy(\"percentage\")\n    .reverse()\n    .toArray();\n\n  dispatch({\n    type: LOAD_LEADERBOARD,\n    payload: {\n      top,\n    },\n  });\n};\n\n/**\n * Save a user score in IndexedDB\n *\n * @param {String} name\n * @param {Number} answersCorrect\n */\nexport const saveScore = ({ name, answersCorrect }) => async (dispatch) => {\n  const settings = getSettings();\n\n  const insertId = await db.leaderboard.add({\n    name,\n    answersCorrect,\n    answersTotal: settings.amount,\n    percentage: (100 * answersCorrect) / settings.amount,\n    difficulty: settings.difficulty,\n    type: settings.type,\n  });\n\n  storage.setItem(\"latest_id\", insertId);\n\n  return loadLeaderboard()(dispatch);\n};\n","/* eslint-disable import/prefer-default-export */\nimport Storage from \"../../api/Storage\";\n\nexport const SAVE_SETTINGS = \"SAVE_SETTINGS\";\nconst storage = new Storage(\"settings\");\n\n/**\n * Synchronous action to load settings from localStorage to Redux\n * @returns {{payload, type: string}}\n */\nexport const loadSettingsFromStorage = () => ({\n  type: SAVE_SETTINGS,\n  payload: {\n    ...(storage.getItem(\"settings\", {})),\n  },\n});\n\n/**\n * Update settings both in local storage and Redux\n * @param settings\n * @returns {{payload, type: string}}\n */\nexport const saveSettings = (settings) => {\n  storage.setItem(\"settings\", settings);\n  return {\n    type: SAVE_SETTINGS,\n    payload: settings,\n  };\n};\n"],"sourceRoot":""}